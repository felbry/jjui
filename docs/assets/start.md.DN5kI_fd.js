import{_ as a,c as s,o as e,a1 as i}from"./chunks/framework.CrIopIFz.js";const y=JSON.parse('{"title":"安装和引入","description":"","frontmatter":{"head":[["link",{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.15.1/cdn/themes/light.css"}],["script",{"type":"module","src":"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.15.1/cdn/shoelace.js"}]]},"headers":[],"relativePath":"start.md","filePath":"start.md"}'),t={name:"start.md"},l=i(`<h1 id="安装和引入" tabindex="-1">安装和引入 <a class="header-anchor" href="#安装和引入" aria-label="Permalink to &quot;安装和引入&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><code>npm i @ylfe/lazy-chart -S</code></p><h2 id="引入项目" tabindex="-1">引入项目 <a class="header-anchor" href="#引入项目" aria-label="Permalink to &quot;引入项目&quot;">​</a></h2><p>通常我们在项目的<strong>主入口</strong>引入，比如 vue 工程的<code>main.js</code>中，这样就能在整个项目中使用</p><h3 id="全部引入" tabindex="-1">全部引入 <a class="header-anchor" href="#全部引入" aria-label="Permalink to &quot;全部引入&quot;">​</a></h3><p><code>import &#39;@ylfe/lazy-chart&#39;</code></p><h3 id="按需引入" tabindex="-1">按需引入 <a class="header-anchor" href="#按需引入" aria-label="Permalink to &quot;按需引入&quot;">​</a></h3><p><code>import &#39;@ylfe/lazy-chart/bar&#39;</code></p><p><code>import &#39;@ylfe/lazy-chart/line&#39;</code></p><p><code>import &#39;@ylfe/lazy-chart/pie&#39;</code></p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>引入之后，就可以在页面的任何地方以<code>lc-</code>开头使用各种图表了。就像使用原生<code>div</code>标签一样简单。</p><p>比如</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">lc-bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[...]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">lc-bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">lc-line</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">lc-line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,15),h=[l];function n(r,o,p,c,d,k){return e(),s("div",null,h)}const g=a(t,[["render",n]]);export{y as __pageData,g as default};
