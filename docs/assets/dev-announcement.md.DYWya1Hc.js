import{_ as a,c as s,o as e,a1 as i}from"./chunks/framework.CrIopIFz.js";const E=JSON.parse('{"title":"开发注意事项","description":"","frontmatter":{"head":[["link",{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.15.1/cdn/themes/light.css"}],["script",{"type":"module","src":"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.15.1/cdn/shoelace.js"}]]},"headers":[],"relativePath":"dev-announcement.md","filePath":"dev-announcement.md"}'),t={name:"dev-announcement.md"},n=i(`<h1 id="开发注意事项" tabindex="-1">开发注意事项 <a class="header-anchor" href="#开发注意事项" aria-label="Permalink to &quot;开发注意事项&quot;">​</a></h1><h2 id="图表的宽高" tabindex="-1">图表的宽高 <a class="header-anchor" href="#图表的宽高" aria-label="Permalink to &quot;图表的宽高&quot;">​</a></h2><p>图表的默认宽高都是<code>100%</code>，相对于它的父容器。</p><p>因此，你可以用一个<strong>已有宽高</strong>的容器来包裹图表，比如：<code>&lt;div class=&quot;container&quot;&gt;&lt;lazy-bar&gt;&lt;/lazy-bar&gt;&lt;/div&gt;</code>。</p><p>也可以直接用<code>style</code>设置图表的宽高，比如：<code>&lt;lazy-bar style=&quot;width: 300px; height: 20rem&quot;&gt;&lt;/lazy-bar&gt;</code></p><h2 id="环境差异" tabindex="-1">环境差异 <a class="header-anchor" href="#环境差异" aria-label="Permalink to &quot;环境差异&quot;">​</a></h2><p>各大主流框架虽然对 Web Component 做了很好的支撑，但不同框架不同版本还有一些差异</p><h3 id="_1-传参问题" tabindex="-1">1. 传参问题 <a class="header-anchor" href="#_1-传参问题" aria-label="Permalink to &quot;1. 传参问题&quot;">​</a></h3><p>图表组件的所有 Prop 都设计为 DOM 的 Property 而不是 Attribute，在 Vue2 中，需要<code>.prop</code>显式修饰一下才行；而在 Vue3 中可以自动判断。</p><h4 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h4><p><code>&lt;lc-line :source.prop=&quot;arr&quot;&gt;&lt;/lc-line&gt;</code></p><h4 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h4><p><code>&lt;lc-line :source=&quot;arr&quot;&gt;&lt;/lc-line&gt;</code></p><h3 id="_2-构建问题" tabindex="-1">2. 构建问题 <a class="header-anchor" href="#_2-构建问题" aria-label="Permalink to &quot;2. 构建问题&quot;">​</a></h3><p>Vue2 不识别的标签默认就认为是自定义元素；而 Vue3 使用 Vite 构建时，需要显式排除，不让构建。</p><h4 id="vue2-1" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2-1" aria-label="Permalink to &quot;Vue2&quot;">​</a></h4><p>无需额外配置</p><h4 id="vue3-1" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-1" aria-label="Permalink to &quot;Vue3&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-h9P9J" id="tab-jXFRm5k" checked><label for="tab-jXFRm5k">vite.config.js</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vue: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    template: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      compilerOptions: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将所有前缀为 lc- 的标签名都视为自定义元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        isCustomElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lc-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div>`,19),l=[n];function h(p,r,o,d,c,k){return e(),s("div",null,l)}const g=a(t,[["render",h]]);export{E as __pageData,g as default};
